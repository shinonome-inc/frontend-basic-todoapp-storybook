{"version":3,"file":"components-Organisms-TodoCard-story.7ff4ba51.iframe.bundle.js","mappings":";;;;;AAqBA;;;;;;;;;;;;AAYA;;AAIA;AACA;AACA;;;;ACxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSA;;;;;;;;;AASA;;;ACAA;AACA;AACA;;;;;;;;;;;ACiBA;;AAIA;;;;;AAOA;AACA;AACA;;;;;;AAQA;;;;;ACLA;;;;;;AAQA","sources":["webpack://fb2022-todoapp/./src/components/Atoms/AddTaskButton/index.jsx","webpack://fb2022-todoapp/./src/components/Atoms/Checkbox/index.jsx","webpack://fb2022-todoapp/./src/components/Atoms/EditButton/index.jsx","webpack://fb2022-todoapp/./src/components/Atoms/Input/index.jsx","webpack://fb2022-todoapp/./src/components/Molecules/Task/index.jsx","webpack://fb2022-todoapp/./src/components/Organisms/TodoCard/index.jsx"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport COLOR from \"../../../variables/color\";\nimport TEXT from \"../../../variables/texts\";\nimport plus from \"../../../assets/svg/plus.svg\";\n\nconst AddTaskButton = ({ onClick }) => {\n  return (\n    <StyledButton onClick={onClick}>\n      <img src={plus} />\n      <StyledLabel>タスクを追加</StyledLabel>\n    </StyledButton>\n  );\n};\nexport default AddTaskButton;\n\nconst StyledButton = styled.button`\n  border: none;\n  outline: none;\n  cursor: pointer;\n  border-radius: 12px;\n  background: ${COLOR.GREEN_TRANSPARENT};\n  transition: 0.2s;\n  display: flex;\n  align-items: center;\n  padding: 2px 6px;\n\n  & > img {\n    width: 20px;\n    height: 20px;\n  }\n\n  &:hover {\n    background: ${COLOR.GREEN_TRANSLUCENT};\n  }\n`;\n\nconst StyledLabel = styled.div`\n  color: ${COLOR.GREEN};\n  ${TEXT.S};\n  margin-left: 10px;\n  white-space: nowrap;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport check from \"../../../assets/svg/check.svg\";\nimport COLOR from \"../../../variables/color\";\n\nconst Checkbox = ({ onClick }) => {\n  return (\n    <StyledButton onClick={onClick}>\n      <img src={check} />\n    </StyledButton>\n  );\n};\nexport default Checkbox;\n\nconst StyledButton = styled.button`\n  border: 2px solid ${COLOR.LIGHT_GRAY};\n  border-radius: 2px;\n  background: none;\n  outline: none;\n  width: 20px;\n  height: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  padding: 0;\n\n  & > img {\n    display: none;\n    width: 100%;\n    height: 100%;\n  }\n\n  &:hover {\n    & > img {\n      display: block;\n    }\n  }\n`;\n","import React from \"react\";\nimport pencil from \"../../../assets/svg/pencil.svg\";\nimport styled from \"styled-components\";\nimport COLOR from \"../../../variables/color\";\n\nconst EditButton = ({ onClick }) => {\n  return (\n    <StyledButton onClick={onClick}>\n      <img src={pencil} />\n    </StyledButton>\n  );\n};\nexport default EditButton;\n\nconst StyledButton = styled.button`\n  border: none;\n  outline: none;\n  cursor: pointer;\n  position: relative;\n  width: 20px;\n  height: 20px;\n  background: none;\n  padding: 0;\n  border-radius: 50%;\n  background-color: ${COLOR.LIGHT_GRAY_TRANSPARENT};\n  transition: 0.2s;\n\n  & > img {\n    width: 100%;\n    height: 100%;\n  }\n\n  &:hover {\n    background-color: ${COLOR.LIGHT_GRAY_TRANSLUCENT};\n  }\n`;\n","import React, { useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport COLOR from \"../../../variables/color\";\nimport TEXT from \"../../../variables/texts\";\n\nconst Input = ({ onEditComplete, defaultValue = \"\" }) => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  const handleBlur = () => {\n    onEditComplete(ref.current.value);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key !== \"Enter\") return;\n    onEditComplete(ref.current.value);\n  };\n\n  return (\n    <StyledInput\n      defaultValue={defaultValue}\n      onBlur={handleBlur}\n      onKeyDown={handleKeyDown}\n      ref={ref}\n    />\n  );\n};\nexport default Input;\n\nconst StyledInput = styled.input.attrs((props) => ({ ...props, size: \"1\" }))`\n  background-color: ${COLOR.BLACK};\n  color: ${COLOR.LIGHT_GRAY};\n  ${TEXT.S}\n  border-radius: 2px;\n  padding: 0 4px;\n  border: none;\n  outline: none;\n  width: 100%;\n`;","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport COLOR from \"../../../variables/color\";\nimport TEXT from \"../../../variables/texts\";\nimport Checkbox from \"../../Atoms/Checkbox\";\nimport EditButton from \"../../Atoms/EditButton\";\nimport Input from \"../../Atoms/Input\";\n\nconst Task = ({\n  onTaskNameChange,\n  onTaskComplete,\n  taskName = \"\",\n  defaultIsEditing = false,\n}) => {\n  const [isEditing, setIsEditing] = useState(defaultIsEditing);\n\n  const onEditComplete = (value) => {\n    setIsEditing(false);\n    onTaskNameChange(value);\n  };\n\n  const onEditButtonClick = () => {\n    setIsEditing(true);\n  };\n\n  return (\n    <StyledWrapper>\n      <StyledCheckboxWrapper>\n        <Checkbox onClick={onTaskComplete} />\n      </StyledCheckboxWrapper>\n      {isEditing ? (\n        <Input onEditComplete={onEditComplete} defaultValue={taskName} />\n      ) : (\n        <StyledNameAndButtonWrapper>\n          <StyledTaskName>{taskName}</StyledTaskName>\n          <StyledEditButtonWrapper>\n            <EditButton onClick={onEditButtonClick} />\n          </StyledEditButtonWrapper>\n        </StyledNameAndButtonWrapper>\n      )}\n    </StyledWrapper>\n  );\n};\nexport default Task;\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 2px 6px;\n  overflow: hidden;\n`;\n\nconst StyledCheckboxWrapper = styled.div`\n  margin-right: 10px;\n`;\n\nconst StyledNameAndButtonWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1 1 auto;\n  overflow: hidden;\n`;\n\nconst StyledTaskName = styled.div`\n  ${TEXT.S}\n  color: ${COLOR.LIGHT_GRAY};\n  flex: 1 1 auto;\n  margin-right: 10px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`;\n\nconst StyledEditButtonWrapper = styled.div`\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n`;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useAlertHandlerContext } from \"../../../contexts/alert_handler\";\nimport COLOR from \"../../../variables/color\";\nimport AddTaskButton from \"../../Atoms/AddTaskButton\";\nimport Task from \"../../Molecules/Task\";\n\nconst TodoCard = () => {\n  const [taskList, setTaskList] = useState([]);\n  const AlertHandlerContext = useAlertHandlerContext();\n\n  const onAddTaskButtonClick = () => {\n    const newTask = {\n      name: \"\",\n      initializing: true,\n    };\n    setTaskList(taskList.concat(newTask));\n  };\n\n  const onTaskComplete = (index) => {\n    let newTaskList = taskList.filter((_, idx) => idx != index);\n    setTaskList(newTaskList);\n  };\n\n  const onTaskNameChange = (value, index) => {\n    let newTaskList = [...taskList];\n    if (value === \"\") {\n      newTaskList.splice(index, 1);\n      AlertHandlerContext.setAlert(\"タスクの名前が設定されていません。\");\n    } else {\n      newTaskList.splice(index, 1, {\n        name: value,\n        initializing: false,\n      });\n    }\n    setTaskList(newTaskList);\n  };\n\n  useEffect(() => {\n    const currentTaskList = JSON.parse(localStorage.getItem(\"tasklist\"));\n    if (currentTaskList === null) return;\n    setTaskList(currentTaskList);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"tasklist\", JSON.stringify(taskList));\n  }, [taskList]);\n\n  return (\n    <StyledWrapper>\n      <AddTaskButton onClick={onAddTaskButtonClick} />\n      <StyledTaskList>\n        {taskList.map((task, index) => (\n          <Task\n            key={index}\n            onTaskComplete={() => onTaskComplete(index)}\n            onTaskNameChange={(value) => onTaskNameChange(value, index)}\n            taskName={task.name}\n            defaultIsEditing={task.initializing}\n          />\n        ))}\n      </StyledTaskList>\n    </StyledWrapper>\n  );\n};\nexport default TodoCard;\n\nconst StyledWrapper = styled.div`\n  background-color: ${COLOR.LIGHT_BLACK};\n  border-radius: 4px;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst StyledTaskList = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-self: stretch;\n\n  & > * {\n    margin-top: 10px;\n  }\n`;\n"],"names":[],"sourceRoot":""}